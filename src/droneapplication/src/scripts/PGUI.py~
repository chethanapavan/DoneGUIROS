# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PGUI.ui'
#
# Created: Wed Aug 23 00:09:37 2017
#      by: PyQt4 UI code generator 4.10.4
#
# WARNING! All changes made in this file will be lost!


#import Unt
import rospy
import actionlib
from std_msgs.msg import String
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist
from PyQt4 import QtCore, QtGui


import roslib; roslib.load_manifest('ardrone_python')

from ardrone_autonomy.msg import Navdata # for receiving navdata feedback
from drone_status import DroneStatus


try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
     return QtGui.QApplication.translate(context, text, disambig)


global altitude, state, battery, vx,vy,vz,rotX,rotY,rotZ


class Ui_Form(object):

    def __init__(self):
        pass

    def ReceiveNavdata(self):
        battery = self.batteryPercent#self.batteryPercent
        state = self.state
        altitude = self.altd
        vx = self.vx
        vy = self.vy
        vz = self.vz
        rotX = self.rotX
        rotY = self.rotY
        rotZ = self.rotZ
        # vx1 = navdata.vx
        # battery = 100
        print("%f,%f,%f,%f,%f,%f,%f,%f,%f" % (battery,state,altitude,vx,vy,vz,rotX,rotY,rotZ))
        
        self.Vx_D.setText(vx)

    def click(self):

        print ("Hello Click pressed")
        h = 100
        self.Vx_D.setText(str(h))


   #def test(self):

    #    x = 100;
    #    form1 =  setupUi()
    #    print(self.vx)
    #    self.form1.Vx_D.setText(self.x)

    def takeOff(self):
        self.takeoff_pub.publish(Empty())
        print("Take-Off Called")

    def land(self):
        self.land_pub.publish(Empty())
        print("Land called")

    def stop(self):
        self.twist = Twist()
        self.twist.linear.x = 0.0
        self.twist.linear.y = 0.0
        self.twist.angular.z = 0.0
        self.velocity_pub.publish(self.twist)
        print("inside stop")

    def forward(self):
            #fw.write("inside--Forward\n")
        self.twist = Twist()
        self.twist.linear.x = 1.0
        self.velocity_pub.publish(self.twist)
        print("inside forward")


    def backward(self):
            #fw.write("inside--backward\n")
        self.twist = Twist()
        self.twist.linear.x = -1.0
        self.velocity_pub.publish(self.twist)
        print("inside backward")

    def right(self):
            #fw.write("inside--right\n")
        self.twist = Twist()
        self.twist.linear.y = 1.0
        self.velocity_pub.publish(self.twist)

    def left(self):
            #fw.write("inside--Left\n")
        self.twist = Twist()
        self.twist.linear.y = -1.0
        self.velocity_pub.publish(self.twist)

    def turnLeft(self):
            #fw.write("inside--rotationPositive\n")
        self.twist = Twist()
        self.twist.angular.z = 1.0
        self.velocity_pub.publish(self.twist)

    def turnRight(self):
            #fw.write("inside--RotationNegative\n")
        self.twist = Twist()
        self.twist.angular.z = -1.0
        self.velocity_pub.publish(self.twist)

    def up(self):
            #fw.write("inside_flyup\n")
        self.twist = Twist()
        self.twist.linear.z = 1.0
        self.velocity_pub.publish(self.twist)

    def down(self):
            #fw.write("inside_flydown")
        self.twist = Twist()
        self.twist.linear.z = -1.0
        self.velocity_pub.publish(self.twist)
    
  
    rospy.Subscriber('/ardrone/navdata', Navdata, ReceiveNavdata)
    takeoff_pub = rospy.Publisher("/ardrone/takeoff", Empty, queue_size=10)
    land_pub = rospy.Publisher("ardrone/land", Empty, queue_size=10)

    # Allow the controller to lpublish to the /cmd_vel topic and thus control the drone
    velocity_pub = rospy.Publisher("cmd_vel", Twist, queue_size=10)
    
    def setupUi(self, Form):
        #self.Form = For
        Form.setObjectName(_fromUtf8("Form"))
        Form.resize(867, 602)
        self.TakeOff = QtGui.QPushButton(Form)
        self.TakeOff.setGeometry(QtCore.QRect(130, 340, 112, 31))
        self.TakeOff.setAutoRepeat(False)
        self.TakeOff.setObjectName(_fromUtf8("TakeOff"))

        self.Land = QtGui.QPushButton(Form)
        self.Land.setGeometry(QtCore.QRect(270, 340, 112, 31))
        self.Land.setAutoRepeat(False)
        self.Land.setObjectName(_fromUtf8("Land"))

        self.Stop = QtGui.QPushButton(Form)
        self.Stop.setGeometry(QtCore.QRect(400, 340, 112, 31))
        self.Stop.setAutoRepeat(False)
        self.Stop.setObjectName(_fromUtf8("Stop"))


        self.Left = QtGui.QPushButton(Form)
        self.Left.setGeometry(QtCore.QRect(60, 160, 112, 31))
        self.Left.setObjectName(_fromUtf8("Left"))

        self.Forward = QtGui.QPushButton(Form)
        self.Forward.setGeometry(QtCore.QRect(170, 130, 112, 31))
        self.Forward.setObjectName(_fromUtf8("Forward"))

        self.Right = QtGui.QPushButton(Form)
        self.Right.setGeometry(QtCore.QRect(280, 160, 112, 31))
        self.Right.setObjectName(_fromUtf8("Right"))

        self.Backward = QtGui.QPushButton(Form)
        self.Backward.setGeometry(QtCore.QRect(170, 190, 112, 31))
        self.Backward.setObjectName(_fromUtf8("Backward"))

        self.Up = QtGui.QPushButton(Form)
        self.Up.setGeometry(QtCore.QRect(170, 230, 112, 31))
        self.Up.setObjectName(_fromUtf8("Up"))

        self.Down = QtGui.QPushButton(Form)
        self.Down.setGeometry(QtCore.QRect(170, 280, 112, 31))
        self.Down.setObjectName(_fromUtf8("Down"))

        self.TurnLeft = QtGui.QPushButton(Form)
        self.TurnLeft.setGeometry(QtCore.QRect(60, 260, 112, 31))
        self.TurnLeft.setObjectName(_fromUtf8("TurnLeft"))

        self.TurnRight = QtGui.QPushButton(Form)
        self.TurnRight.setGeometry(QtCore.QRect(280, 260, 112, 31))
        self.TurnRight.setObjectName(_fromUtf8("TurnRight"))


        self.Click = QtGui.QPushButton(Form)
        self.Click.setGeometry(QtCore.QRect(130, 400, 112, 31))
        self.Click.setObjectName(_fromUtf8("Click"))


        self.label = QtGui.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(80, 80, 78, 21))
        self.label.setObjectName(_fromUtf8("label"))


        #self.progressBar = QtGui.QProgressBar(Form)
        #self.progressBar.setGeometry(QtCore.QRect(170, 80, 118, 23))
        #self.Battery.setProperty("value", 10)
        #self.progressBar.setObjectName(_fromUtf8("Battery"))

        #self.label = QtGui.QLabel(Form)
        #self.label.setGeometry(QtCore.QRect(80, 80, 78, 21))
        #self.label.setObjectName(_fromUtf8("label"))

        self.Vy = QtGui.QLabel(Form)
        self.Vy.setGeometry(QtCore.QRect(510, 340, 78, 21))
        self.Vy.setObjectName(_fromUtf8("Vy"))
        
        self.Vz = QtGui.QLabel(Form)
        self.Vz.setGeometry(QtCore.QRect(510, 380, 78, 21))
        self.Vz.setObjectName(_fromUtf8("Vz"))
        
        self.Altitude = QtGui.QLabel(Form)
        self.Altitude.setGeometry(QtCore.QRect(510, 420, 78, 21))
        self.Altitude.setObjectName(_fromUtf8("Altitude"))
        
        self.Vx = QtGui.QLabel(Form)
        self.Vx.setGeometry(QtCore.QRect(510, 300, 78, 21))
        self.Vx.setObjectName(_fromUtf8("Vx"))
       
        self.Battery = QtGui.QLabel(Form)
        self.Battery.setGeometry(QtCore.QRect(510, 460, 78, 21))
        self.Battery.setObjectName(_fromUtf8("Battery"))
        
        self.Vx_D = QtGui.QLabel(Form)
        self.Vx_D.setGeometry(QtCore.QRect(640, 300, 78, 21))
        self.Vx_D.setObjectName(_fromUtf8("Vx_D"))
        #self.vx_D.setText(RD.vx)

        self.Vy_D = QtGui.QLabel(Form)
        self.Vy_D.setGeometry(QtCore.QRect(640, 340, 78, 21))
        self.Vy_D.setObjectName(_fromUtf8("Vy_D"))
        
        self.Vz_D = QtGui.QLabel(Form)
        self.Vz_D.setGeometry(QtCore.QRect(640, 380, 78, 21))
        self.Vz_D.setObjectName(_fromUtf8("Vz_D"))
        
        self.Alt_D = QtGui.QLabel(Form)
        self.Alt_D.setGeometry(QtCore.QRect(640, 420, 78, 21))
        self.Alt_D.setObjectName(_fromUtf8("Alt_D"))
        
        self.Bat_D = QtGui.QLabel(Form)
        self.Bat_D.setGeometry(QtCore.QRect(640, 460, 78, 21))
        self.Bat_D.setObjectName(_fromUtf8("Bat_D"))

        #self.update_values()
        

        self.retranslateUi(Form)
        
        QtCore.QObject.connect(self.TakeOff, QtCore.SIGNAL(_fromUtf8("clicked()")), self.takeOff)
        QtCore.QObject.connect(self.Land, QtCore.SIGNAL(_fromUtf8("clicked()")), self.land)
        QtCore.QObject.connect(self.Stop, QtCore.SIGNAL(_fromUtf8("clicked()")), self.stop)
        QtCore.QObject.connect(self.Forward, QtCore.SIGNAL(_fromUtf8("clicked()")), self.forward)
        QtCore.QObject.connect(self.Backward, QtCore.SIGNAL(_fromUtf8("clicked()")), self.backward)
        QtCore.QObject.connect(self.Left, QtCore.SIGNAL(_fromUtf8("clicked()")), self.left)
        QtCore.QObject.connect(self.Right, QtCore.SIGNAL(_fromUtf8("clicked()")), self.right)
        QtCore.QObject.connect(self.Up, QtCore.SIGNAL(_fromUtf8("clicked()")), self.up)
        QtCore.QObject.connect(self.Down, QtCore.SIGNAL(_fromUtf8("clicked()")), self.down)
        QtCore.QObject.connect(self.TurnLeft, QtCore.SIGNAL(_fromUtf8("clicked()")), self.turnLeft)
        QtCore.QObject.connect(self.TurnRight, QtCore.SIGNAL(_fromUtf8("clicked()")), self.turnRight)
        QtCore.QObject.connect(self.Click, QtCore.SIGNAL(_fromUtf8("clicked()")), self.click)


        #QtCore.QObject.connect(self.Vy, QtCore.SIGNAL(_fromUtf8("valueChanged(int)")), data.vy)



       # QtCore.QObject.connect(self.GetData, QtCore.SIGNAL(_fromUtf8("clicked()")), self.ReceiveNavdata)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        Form.setWindowTitle(_translate("Form", "Form", None))
        self.TakeOff.setText(_translate("Form", "Take-Off", None))
        self.Land.setText(_translate("Form", "Land", None))
        self.Left.setText(_translate("Form", "Left", None))
        self.Forward.setText(_translate("Form", "Forward", None))
        self.Right.setText(_translate("Form", "Right", None))
        self.Backward.setText(_translate("Form", "Backward", None))
        self.Up.setText(_translate("Form", "Up", None))
        self.Down.setText(_translate("Form", "Down", None))
        self.TurnLeft.setText(_translate("Form", "TurnLeft", None))
        self.TurnRight.setText(_translate("Form", "TurnRight", None))
        #self.GetData.setText(_translate("Form", "GetData", None))
        self.Stop.setText(_translate("Form", "Stop", None))
        #self.label.setText(_translate("Form", "Battery%", None))
        #self.label.setText(_translate("Form", "Battery", None))
        self.Vy.setText(_translate("Form", "Vy", None))
        self.Vz.setText(_translate("Form", "Vz", None))
        self.Altitude.setText(_translate("Form", "Altitude", None))
        self.Vx.setText(_translate("Form", "Vx", None))
        self.Battery.setText(_translate("Form", "Battery", None))
        self.Vx_D.setText(_translate("Form", "Vx_D", None))
        self.Vy_D.setText(_translate("Form", "Vy_D", None))
        self.Vz_D.setText(_translate("Form", "Vz_D", None))
        self.Alt_D.setText(_translate("Form", "Alt_D", None))
        self.Bat_D.setText(_translate("Form", "Bat_D", None))
        self.Click.setText(_translate("Form","click",None))
    
    
 
    
  
 
if __name__ == "__main__":
    import sys

    rospy.init_node('ardrone_control_node', anonymous=True)
    #rospy.Subscriber('/ardrone/navdata', Navdata, ReceiveNavdata)

    rospy.set_param('batteryPercent', 0)
    #print(batteryPercent)


    app = QtGui.QApplication(sys.argv)
    Form = QtGui.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.setWindowTitle("GUI")  
    Form.setGeometry(0,0,1000,500)
    Form.show()
    sys.exit(app.exec_())

